name: Wine Debian Staging CI

on:
  #schedule:
  #  - cron:  '25 9,21 * * *'
  workflow_dispatch:

jobs:
  get-release-info:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      last_tag: ${{ steps.get-tag.outputs.tag }}
      asset_names: ${{ steps.get-assets.outputs.names }}
    steps:
      - name: Get last tag
        id: get-tag
        run: |
          TAG=$(gh release list --repo "$GITHUB_REPOSITORY" --limit 1 --json tagName --jq '.[0].tagName')
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Get asset names
        id: get-assets
        run: |
          ASSETS=$(gh release view --repo "$GITHUB_REPOSITORY" "${{ steps.get-tag.outputs.tag }}" --json assets -q '.assets[].name | sub("-[0-9]+\\.tar\\.gz$"; "")')
          echo "names=$(printf "%s;" $ASSETS | sed 's/;$//')" >> "$GITHUB_OUTPUT"
  build:
    runs-on: ubuntu-latest
    needs: get-release-info
    container:
      image: "debian:11"
    env:
      DEBIAN_FRONTEND: noninteractive
      TZ: UTC
    steps:
      - name: Install Git
        run: |
          apt-get update
          apt-get install -y git
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Compilation
        shell: bash {0}
        run: |
          dpkg --add-architecture i386 && apt-get update
          apt-get install -y aptitude

          echo '${{ needs.get-release-info.outputs.asset_names }}' > assets.txt
          export LAST_TAG="${{ needs.get-release-info.outputs.last_tag }}"

          cat assets.txt
          echo $LAST_TAG

          ./build-lug-wine.sh staging-fsync
      - name: Upload Archive
        uses: actions/upload-artifact@v4
        with:
          name: "lug-wine-tkg-build"
          path: ./output
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: "lug-wine-tkg-build"
          path: .
      - name: Find archive
        id: find
        shell: bash {0}
        run: |
          file="$(find . -name '*.tar.gz' | head -n1)"
          version="$(echo "$file" | grep -oE '[0-9]+\.[0-9]+(-[0-9]+)?')"
          echo "ARCHIVE_PATH=$file" >> $GITHUB_OUTPUT
          echo "NEW_TAG=$version" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.find.outputs.NEW_TAG }}
          files: ${{ steps.find.outputs.ARCHIVE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}